// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now())

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now())
}

model User {
  id              String      @id @default(cuid())
  name            String?
  username        String?     @unique
  bio             String?
  email           String?     @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  calAccount      CalAccount? @relation(fields: [calAccountId], references: [id], onDelete: Cascade)
  calAccountId    Int?        @unique
  calAccessToken  String?     @unique
  calRefreshToken String?     @unique

  createdAt             DateTime?             @default(now())
  selectedFilterOptions FilterOptionsOnUser[]
}

model CalAccount {
  id                Int    @id
  username          String @unique
  email             String @unique
  timeZone          String
  weekStart         String
  createdDate       String
  timeFormat        Int
  defaultScheduleId Int?
  // expires   DateTime
  user              User?

  createdAt DateTime? @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime? @default(now())

  @@unique([identifier, token])
}

model FilterOption {
  fieldId    String    @unique
  fieldValue String
  fieldLabel String
  createdAt  DateTime? @default(now())

  // FilterOption table can have multiple users, so that a user can have multiple filters
  // User ∞ : ∞ FilterOption allows us to query directly on the user though user.filterValues.findMany({ where: { filterFieldId: 'budget' } })
  selectedByUsers FilterOptionsOnUser[]

  // NB(richard): this is basically a hard-coded 1:many between FilterOption & FilterCategory
  // I wanted to avoid defining the parent table explicitly to keep things simple but have the the `@@unique` constraint to ensure that we can migrate data to a proper parent table later
  filterCategoryFieldId String
  filterCategoryValue   String
  filterCategoryLabel   String

  // we define the fieldId & filterCategoryId as unique, so that we can define the many:many between User & Filter on multiple fields (improve query performance)
  @@unique([fieldId, filterCategoryFieldId])
  @@index([fieldId, filterCategoryFieldId])
}

model FilterOptionsOnUser {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  filterOption          FilterOption @relation(fields: [filterOptionFieldId, filterCategoryFieldId], references: [fieldId, filterCategoryFieldId])
  filterOptionFieldId   String
  filterCategoryFieldId String

  createdAt DateTime? @default(now())

  // we define the fieldId & filterCategoryId as unique, so that we can define the many:many between User & Filter on multiple fields (improve query performance)
  @@unique([userId, filterOptionFieldId, filterCategoryFieldId])
  @@index([userId, filterOptionFieldId, filterCategoryFieldId])
}
